{"version":3,"sources":["AnyHotPass.js","App.js","serviceWorker.js","index.js"],"names":["AnyHotPass","location","useLocation","useState","master","setMaster","masterCheck","setMasterCheck","search","substring","domain","setDomain","password","setPassword","passwordRef","useRef","onSubmit","e","preventDefault","length","newPassword","generatePass","generate","className","autoFocus","type","placeholder","required","onChange","newMaster","newMasterCheck","passwordChanged","target","value","ref","readOnly","onClick","current","select","focus","copy","copyPassword","icon","faClipboard","size","title","App","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ykBA8DeA,MAtDf,WACE,IAAMC,EAAWC,cADG,EAEQC,mBAAS,IAFjB,mBAEbC,EAFa,KAELC,EAFK,OAGkBF,mBAAS,IAH3B,mBAGbG,EAHa,KAGAC,EAHA,OAIQJ,mBAASF,EAASO,OAAOC,UAAU,IAJ3C,mBAIbC,EAJa,KAILC,EAJK,OAKYR,mBAAS,IALrB,mBAKbS,EALa,KAKHC,EALG,KAMdC,EAAcC,iBAAO,MA0B3B,OACE,0BAAMC,SAAU,SAACC,GAAD,OAnBD,SAACA,GAEhB,GADAA,EAAEC,iBACoB,IAAlBd,EAAOe,QAAkC,IAAlBT,EAAOS,OAAlC,CAGA,IAAMC,EAAcC,IAAajB,EAAQM,EAAQ,IACjDG,EAAYO,IAaWE,CAASL,KAC9B,yBAAKM,UAAU,cACb,2BAAOC,WAAS,EAACC,KAAK,WAAWF,UAAU,eAAeG,YAAY,kBAAkBC,UAAQ,EAACC,SAAU,SAACX,GAAD,OA3BzF,SAACY,GACvB,IAAMC,EAAiBT,IAAaQ,EAAW,GAAI,IAAIpB,UAAU,EAAG,GACpEF,EAAeuB,GACfzB,EAAUwB,GAwB4GE,CAAgBd,EAAEe,OAAOC,QAAQA,MAAO7B,IACzJA,EAAOe,OAAS,EAAI,yBAAKI,UAAU,kBACjCjB,GACM,MAEX,yBAAKiB,UAAU,cACb,2BAAOE,KAAK,OAAOF,UAAU,eAAeG,YAAY,cAAcC,UAAQ,EAACC,SAAU,SAACX,GAAD,OAAON,EAAUM,EAAEe,OAAOC,QAAQA,MAAOvB,KAEpI,4BAAQa,UAAU,oCAAoCE,KAAK,UAA3D,YACA,yBAAKF,UAAU,oBACb,2BAAOE,KAAK,OAAOS,IAAKpB,EAAaqB,UAAQ,EAACZ,UAAU,eAAeU,MAAOrB,IAC9E,yBAAKW,UAAU,sBACb,4BAAQA,UAAU,4BAA4BE,KAAK,SAASW,QAAS,SAACnB,GAAD,OAxBxD,SAACA,GACpBA,EAAEC,iBACyB,MAAvBJ,EAAYuB,UACdvB,EAAYuB,QAAQC,SACpBxB,EAAYuB,QAAQE,SAEtBC,IAAK5B,GAkB6E6B,CAAaxB,KAAI,kBAAC,IAAD,CAAiByB,KAAMC,IAAaC,KAAK,KAAKC,MAAM,2B,QCjC5IC,EAfH,kBACV,kBAAC,IAAD,KACE,yBAAKvB,UAAU,aACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,mCACA,kBAAC,IAAD,CAAOwB,KAAK,KACV,kBAAC,EAAD,YCFQC,QACW,cAA7BC,OAAOhD,SAASiD,UAEe,UAA7BD,OAAOhD,SAASiD,UAEhBD,OAAOhD,SAASiD,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4273ee9e.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react';\nimport generatePass from 'anyhotpass-lib';\nimport { useLocation } from \"react-router-dom\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faClipboard } from '@fortawesome/free-solid-svg-icons'\nimport copy from 'copy-to-clipboard';\nimport './AnyHotPass.css';\n\nfunction AnyHotPass() {\n  const location = useLocation();\n  const [master, setMaster] = useState('');\n  const [masterCheck, setMasterCheck] = useState('');\n  const [domain, setDomain] = useState(location.search.substring(1));\n  const [password, setPassword] = useState('');\n  const passwordRef = useRef(null);\n\n  const passwordChanged = (newMaster) => {\n    const newMasterCheck = generatePass(newMaster, '', 12).substring(0, 6);\n    setMasterCheck(newMasterCheck);\n    setMaster(newMaster);\n  };\n\n  const generate = (e) => {\n    e.preventDefault();\n    if (master.length === 0 || domain.length === 0) {\n      return;\n    }\n    const newPassword = generatePass(master, domain, 18);\n    setPassword(newPassword);\n  };\n\n  const copyPassword = (e) => {\n    e.preventDefault();\n    if (passwordRef.current != null) {\n      passwordRef.current.select();\n      passwordRef.current.focus();\n    }\n    copy(password);\n  };\n\n  return (\n    <form onSubmit={(e) => generate(e)}>\n      <div className=\"form-group\">\n        <input autoFocus type=\"password\" className=\"form-control\" placeholder=\"Master Password\" required onChange={(e) => passwordChanged(e.target.value)} value={master} />\n        {master.length > 0 ? <div className=\"valid-feedback\">\n          {masterCheck}\n        </div> : null}\n      </div>\n      <div className=\"form-group\">\n        <input type=\"text\" className=\"form-control\" placeholder=\"example.com\" required onChange={(e) => setDomain(e.target.value)} value={domain} />\n      </div>\n      <button className=\"btn btn-primary btn-lg btn-block \" type=\"submit\">Generate</button>\n      <div className=\"input-group mt-3\">\n        <input type=\"text\" ref={passwordRef} readOnly className=\"form-control\" value={password} />\n        <div className=\"input-group-append\">\n          <button className=\"btn btn-outline-secondary\" type=\"button\" onClick={(e) => copyPassword(e)}><FontAwesomeIcon icon={faClipboard} size=\"lg\" title=\"Copy to Clipboard\"/></button>\n        </div>\n      </div>\n    </form>\n  )\n}\n\nexport default AnyHotPass;\n","import React from 'react';\nimport AnyHotPass from './AnyHotPass';\nimport {\n  BrowserRouter as Router,\n  Route\n} from \"react-router-dom\";\n\nconst App = () => (\n  <Router>\n    <div className=\"container\">\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <h3>AHP</h3>\n          <Route path=\"/\">\n            <AnyHotPass />\n          </Route>\n        </div>\n      </div>\n    </div>\n  </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}