{"version":3,"sources":["AnyHotPass.js","App.js","serviceWorker.js","index.js"],"names":["AnyHotPass","props","state","master","domain","password","hidden","masterChanged","bind","domainChanged","handleGenerate","handleToggle","handleFocus","event","target","select","Modal","show","backdrop","Header","Title","Body","Form","Group","controlId","Control","type","placeholder","required","onChange","this","Button","variant","block","onClick","class","className","readOnly","onFocus","value","e","setState","preventDefault","length","generate","React","Component","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kYAsEeA,E,kDA/Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,OAAQ,GAAIC,OAAQ,GAAIC,SAAU,GAAIC,QAAQ,GAC7D,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBACrB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBACtB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBACpB,EAAKI,YAAc,SAACC,GAAD,OAAWA,EAAMC,OAAOC,UAP1B,E,qDAWjB,OACE,oCACE,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOC,SAAS,SAC1B,kBAACF,EAAA,EAAMG,OAAP,KACE,kBAACH,EAAA,EAAMI,MAAP,aAEF,kBAACJ,EAAA,EAAMK,KAAP,KACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,gBACpB,kBAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,WAAWC,YAAY,kBAAkBC,UAAQ,EAACC,SAAUC,KAAKvB,iBAEtF,kBAACe,EAAA,EAAKC,MAAN,CAAYC,UAAU,cACpB,kBAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,MAAMC,YAAY,cAAcC,UAAQ,EAACC,SAAUC,KAAKrB,iBAE7E,kBAACsB,EAAA,EAAD,CAAQC,QAAQ,YAAYN,KAAK,SAASO,OAAK,EAACC,QAASJ,KAAKpB,eAAgByB,MAAM,QAApF,YACA,kBAACb,EAAA,EAAKC,MAAN,CAAYC,UAAU,aAAaY,UAAU,QAC3C,kBAACd,EAAA,EAAKG,QAAN,CAAcC,KAAK,OAAOW,UAAQ,EAACC,QAASR,KAAKlB,YAAa2B,MAAOT,KAAK5B,MAAMG,kB,oCAShFmC,GACNV,KAAKW,SAAS,CAAEtC,OAAQqC,EAAE1B,OAAOyB,U,oCAG3BC,GACNV,KAAKW,SAAS,CAAErC,OAAQoC,EAAE1B,OAAOyB,U,qCAG1BC,GAEb,GADMA,EAAEE,iBACyB,IAA7BZ,KAAK5B,MAAMC,OAAOwC,QAA6C,IAA7Bb,KAAK5B,MAAME,OAAOuC,OAAxD,CAGA,IAAMtC,EAAWuC,YAASd,KAAK5B,MAAMC,OAAQ2B,KAAK5B,MAAME,OAAQ,IAChE0B,KAAKW,UAAS,SAAAvC,GAAK,MAAK,CAClBG,SAAUA,S,mCAILmC,GAAI,IAAD,OACRA,EAAEE,iBACRZ,KAAKW,UAAS,SAAAvC,GAAK,MAAK,CAClBI,QAAS,EAAKJ,MAAMI,e,GA3DLuC,IAAMC,W,SCIhBC,EANH,kBACV,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,QCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9c9b1469.chunk.js","sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport generate from 'anyhotpass-lib';\n\nclass AnyHotPass extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { master: '', domain: '', password: '', hidden: true };\n    this.masterChanged = this.masterChanged.bind(this);\n    this.domainChanged = this.domainChanged.bind(this);\n    this.handleGenerate = this.handleGenerate.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n    this.handleFocus = (event) => event.target.select();\n  }\n\n  render() {\n    return (\n      <>\n        <Modal show=\"true\" backdrop=\"false\">\n          <Modal.Header>\n            <Modal.Title>AHP</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form>\n              <Form.Group controlId=\"formPassword\">\n                <Form.Control type=\"password\" placeholder=\"Master Password\" required onChange={this.masterChanged} />\n              </Form.Group>\n              <Form.Group controlId=\"formDomain\">\n                <Form.Control type=\"url\" placeholder=\"example.com\" required onChange={this.domainChanged} />\n              </Form.Group>\n              <Button variant=\"secondary\" type=\"submit\" block onClick={this.handleGenerate} class=\"mr-1\" >Generate</Button>\n              <Form.Group controlId=\"formDomain\" className=\"mt-2\">\n                <Form.Control type=\"text\" readOnly onFocus={this.handleFocus} value={this.state.password} />\n              </Form.Group>\n            </Form>\n          </Modal.Body>\n        </Modal>\n      </>\n    )\n  }\n\n  masterChanged(e) {\n          this.setState({ master: e.target.value });\n  }\n\n  domainChanged(e) {\n          this.setState({ domain: e.target.value });\n  }\n\n  handleGenerate(e) {\n          e.preventDefault();\n    if (this.state.master.length === 0 || this.state.domain.length === 0) {\n      return;\n    }\n    const password = generate(this.state.master, this.state.domain, 18);\n    this.setState(state => ({\n          password: password\n    }));\n  }\n\n  handleToggle(e) {\n          e.preventDefault();\n    this.setState(state => ({\n          hidden: !this.state.hidden\n    }));\n  }\n}\n\nexport default AnyHotPass;\n","import React from 'react';\nimport AnyHotPass from './AnyHotPass';\nimport Container from 'react-bootstrap/Container';\n\nconst App = () => (\n  <Container>\n    <AnyHotPass />\n  </Container>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}