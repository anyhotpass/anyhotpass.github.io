{"version":3,"sources":["AnyHotPass.js","App.js","serviceWorker.js","index.js"],"names":["AnyHotPass","useState","master","setMaster","domain","setDomain","password","setPassword","masterRef","useRef","passwordRef","useEffect","current","focus","Modal","show","backdrop","Header","Title","Body","Form","Group","controlId","Control","type","ref","placeholder","required","onChange","e","target","value","Button","variant","block","onClick","preventDefault","length","newPassword","generatePass","generate","class","className","readOnly","onFocus","select","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mfAoDeA,MA9Cf,WAAuB,IAAD,EACQC,mBAAS,IADjB,mBACbC,EADa,KACLC,EADK,OAEQF,mBAAS,IAFjB,mBAEbG,EAFa,KAELC,EAFK,OAGYJ,mBAAS,IAHrB,mBAGbK,EAHa,KAGHC,EAHG,KAIdC,EAAYC,iBAAO,MACnBC,EAAcD,iBAAO,MAgB3B,OAdAE,qBAAU,WACRH,EAAUI,QAAQC,UACjB,IAaD,oCACE,kBAACC,EAAA,EAAD,CAAOC,KAAK,OAAOC,SAAS,SAC1B,kBAACF,EAAA,EAAMG,OAAP,KACE,kBAACH,EAAA,EAAMI,MAAP,aAEF,kBAACJ,EAAA,EAAMK,KAAP,KACE,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,gBACpB,kBAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,WAAWC,IAAKjB,EAAWkB,YAAY,kBAAkBC,UAAQ,EAACC,SAAU,SAACC,GAAD,OAAO1B,EAAU0B,EAAEC,OAAOC,WAE3H,kBAACX,EAAA,EAAKC,MAAN,CAAYC,UAAU,cACpB,kBAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,MAAME,YAAY,cAAcC,UAAQ,EAACC,SAAU,SAACC,GAAD,OAAOxB,EAAUwB,EAAEC,OAAOC,WAElG,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYT,KAAK,SAASU,OAAK,EAACC,QAAS,SAACN,GAAD,OAxBlD,SAACA,GAEhB,GADAA,EAAEO,iBACoB,IAAlBlC,EAAOmC,QAAkC,IAAlBjC,EAAOiC,OAAlC,CAGA,IAAMC,EAAcC,IAAarC,EAAQE,EAAQ,IACjDG,EAAY+B,GACZ5B,EAAYE,QAAQC,SAiBoD2B,CAASX,IAAIY,MAAM,QAAnF,YACA,kBAACrB,EAAA,EAAKC,MAAN,CAAYC,UAAU,aAAaoB,UAAU,QAC3C,kBAACtB,EAAA,EAAKG,QAAN,CAAcC,KAAK,OAAOC,IAAKf,EAAaiC,UAAQ,EAACC,QAAS,SAACf,GAAD,OAAOA,EAAEC,OAAOe,UAAUd,MAAOzB,U,SCjC9FwC,EANH,kBACV,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,QCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e757d7fe.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport generatePass from 'anyhotpass-lib';\n\nfunction AnyHotPass() {\n  const [master, setMaster] = useState('');\n  const [domain, setDomain] = useState('');\n  const [password, setPassword] = useState('');\n  const masterRef = useRef(null);\n  const passwordRef = useRef(null);\n\n  useEffect(() => {\n    masterRef.current.focus();      \n  }, []);\n\n  const generate = (e) => {\n    e.preventDefault();\n    if (master.length === 0 || domain.length === 0) {\n      return;\n    }\n    const newPassword = generatePass(master, domain, 18);\n    setPassword(newPassword);\n    passwordRef.current.focus();\n  };\n\n  return (\n    <>\n      <Modal show=\"true\" backdrop=\"false\">\n        <Modal.Header>\n          <Modal.Title>AHP</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form>\n            <Form.Group controlId=\"formPassword\">\n              <Form.Control type=\"password\" ref={masterRef} placeholder=\"Master Password\" required onChange={(e) => setMaster(e.target.value)} />\n            </Form.Group>\n            <Form.Group controlId=\"formDomain\">\n              <Form.Control type=\"url\" placeholder=\"example.com\" required onChange={(e) => setDomain(e.target.value)} />\n            </Form.Group>\n            <Button variant=\"secondary\" type=\"submit\" block onClick={(e) => generate(e)} class=\"mr-1\" >Generate</Button>\n            <Form.Group controlId=\"formDomain\" className=\"mt-2\">\n              <Form.Control type=\"text\" ref={passwordRef} readOnly onFocus={(e) => e.target.select()} value={password} />\n            </Form.Group>\n          </Form>\n        </Modal.Body>\n      </Modal>\n    </>\n  )\n}\n\nexport default AnyHotPass;\n","import React from 'react';\nimport AnyHotPass from './AnyHotPass';\nimport Container from 'react-bootstrap/Container';\n\nconst App = () => (\n  <Container>\n    <AnyHotPass />\n  </Container>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}